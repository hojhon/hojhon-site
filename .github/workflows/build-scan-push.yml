name: Build, Scan and Push to Docker Hub

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    outputs:
      scan-passed: ${{ steps.evaluate-scan.outputs.passed }}
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Semgrep code scan
      id: semgrep-scan
      run: |
        # Install semgrep
        python -m pip install --upgrade pip
        pip install semgrep
        
        # Run semgrep and capture output
        echo "Running Semgrep scan..."
        semgrep --config=auto --json --output=semgrep-results.json . || true
        
        # Check if results file exists
        if [ ! -f semgrep-results.json ]; then
          echo "No semgrep results file generated"
          echo "critical=0" >> $GITHUB_OUTPUT
          echo "high=0" >> $GITHUB_OUTPUT
          echo "medium=0" >> $GITHUB_OUTPUT
          echo "low=0" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Parse results and count by severity - map based on impact metadata
        critical=$(jq '[.results[] | select(.extra.metadata.impact == "HIGH" and .extra.metadata.likelihood == "HIGH")] | length' semgrep-results.json 2>/dev/null || echo "0")
        high=$(jq '[.results[] | select(.extra.metadata.impact == "HIGH" and .extra.metadata.likelihood != "HIGH")] | length' semgrep-results.json 2>/dev/null || echo "0")
        medium=$(jq '[.results[] | select(.extra.metadata.impact == "MEDIUM" or .extra.severity == "ERROR")] | length' semgrep-results.json 2>/dev/null || echo "0")
        low=$(jq '[.results[] | select(.extra.metadata.impact == "LOW" or .extra.severity == "WARNING" or .extra.severity == "INFO" or .extra.severity == "NOTE")] | length' semgrep-results.json 2>/dev/null || echo "0")
        
        echo "critical=$critical" >> $GITHUB_OUTPUT
        echo "high=$high" >> $GITHUB_OUTPUT
        echo "medium=$medium" >> $GITHUB_OUTPUT
        echo "low=$low" >> $GITHUB_OUTPUT
        
        echo "Security scan results:"
        echo "  Critical: $critical"
        echo "  High: $high"
        echo "  Medium: $medium"
        echo "  Low: $low"

    - name: Upload Semgrep results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: semgrep-results
        path: semgrep-results.json
        retention-days: 7

    - name: Evaluate scan results
      id: evaluate-scan
      run: |
        critical=${{ steps.semgrep-scan.outputs.critical }}
        high=${{ steps.semgrep-scan.outputs.high }}
        medium=${{ steps.semgrep-scan.outputs.medium }}
        low=${{ steps.semgrep-scan.outputs.low }}
        
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Critical | $critical |" >> $GITHUB_STEP_SUMMARY
        echo "| High | $high |" >> $GITHUB_STEP_SUMMARY
        echo "| Medium | $medium |" >> $GITHUB_STEP_SUMMARY
        echo "| Low | $low |" >> $GITHUB_STEP_SUMMARY
        
        if [ "$critical" -gt 0 ] || [ "$high" -gt 0 ]; then
          echo "❌ **Scan FAILED**: Found $critical critical and $high high severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "Build and push will be skipped due to security findings."
          echo "passed=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "✅ **Scan PASSED**: No critical or high severity vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          if [ "$medium" -gt 0 ] || [ "$low" -gt 0 ]; then
            echo "Found $medium medium and $low low severity findings (acceptable for deployment)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "passed=true" >> $GITHUB_OUTPUT
        fi

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    environment: hojhon-site
    needs: security-scan
    if: needs.security-scan.outputs.scan-passed == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Create docker-entrypoint.sh on runner
      run: |
        cat > docker-entrypoint.sh <<'SH'
        #!/bin/sh
        # Replace placeholder in the shipped index.html with the runtime Formspree URL
        if [ -n "$FORMSPREE_FORM_ID" ]; then
          sed -i "s|FORMSPREE_URL_PLACEHOLDER|https://formspree.io/f/$FORMSPREE_FORM_ID|g" /usr/share/nginx/html/index.html || true
        else
          echo "Warning: FORMSPREE_FORM_ID not set"
        fi
        exec "$@"
        SH
        chmod +x docker-entrypoint.sh

    - name: Login to registry
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push final image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_REPOSITORY }}:latest
          ${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }}

    - name: Upload Trivy results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: trivy-results
        path: trivy-results.json
        retention-days: 7

    - name: Final summary
      if: always()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.security-scan.outputs.scan-passed }}" == "true" ]; then
          echo "✅ Image built and pushed successfully to ${{ secrets.DOCKER_REPOSITORY }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "✅ Tagged with commit SHA: ${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Image push skipped due to security vulnerabilities" >> $GITHUB_STEP_SUMMARY
        fi